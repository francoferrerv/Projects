INTRODUCCION:
    Esto es un TDA de una lista simplemente enlazada con implementaciones para los TDA pila y cola, con un iterador interno y otro externo. Tambien se encuentran las pruebas para este TDA para asegurar el correcto funcionamiento de este.
Compilación: gcc lista.c *.c -o lista_se -g -std=c99 -Wall -Wconversion -Wtype-limits -pedantic -Werror -O0 (donde esta *.c va tu archivo donde usas el TDA lista o pruebas.c para ver si pasa las pruebas)
Ejecución: valgrind --leak-check=full --track-origins=yes --show-reachable=yes ./lista_se

Implementacion: Elegí implementarlo con nodos simplemente enlazadas, o sea una estructura que contenia un elemento y un puntero al siguiente nodo y otra estructura llamada lista que contenia un puntero al primer nodo, al ultimo nodo y la cantidad total de nodos en la lista. Si la lista estaba vacia, los nodos inicio y fin apuntaban a nada. Entonces lo que tenia era una cadena de nodos donde se guardaban elementos, que cada uno apuntaba al que le seguia. Al crear la lista y los nodos, se guardan en el heap. Entonces al borrar un nodo siempre tuve que liberar la memoria. Al insertar o borrar nodos habia que tener cuidado con el orden en el que se reasignaba los punteros para no perder acceso al resto de la lista. Las implementaciones de Pila y Cola son muy parecidas a la de la lista, la diferencia siendo que en la pila solo se puede borrar el ultimo elemento (desapilar) e insertar en el ultimo lugar (apilar), y en la Cola solo se puede borrar del primer lugar (desencolar) e insertar del ultimo lugar (encolar). Luego estan las funciones de iterador externo para que el usuario haga una iteracion, haciendo avanzar el iterador, y recorra la lista. En la de iterador interno, el usuario no hace la iteracion, sino que hace la funcion que va a querer aplicar en cada nodo, mientras va iterando. Esta implementacion de nodos tiene la ventaja de que la memoria no es contigua, entonces puedo insertar o borrar elementos sin tener que avanzar o atrasar los elementos del resto de la lista.

CONCEPTOS:

Lista: Una lista es una cadena de elementos no necesariamente ordenados donde estos elementos pueden ser numeros, letras, pasos, etc. Para la informatica diria que es un tipo de dato abstracto que contiene elementos encadenados, cuya politica de entrada y salida de datos no es la misma que la de la Pila o Cola. Se puede insertar, borrar o listar cualquier elemento dentro de la lista sin importar la posicion de este. La lista se puede implementar con vectores o con nodos. Estos nodos pueden ser simplemente enlazados, o sea que cada nodo tiene un puntero al nodo que le sigue, o doblemente enlazados que significa que cada nodo tiene un puntero al nodo que le sigue y tambien otro al que estaba atras de este

Pila y Cola: Las pilas y las colas son listas tambien, solo que su politica de entrada y salida de datos varia. En las Pilas, para insertar un elemento debo insertarlo en la ultima posicion, como si lo apilaras sobre los demas elementos, y para borrar un elemento debo borrar el de la ultima posicion, como si desapilaras un elemento. Para las Colas, insertar es igual, o sea se agrega alfinal, como si te metieras en una cola de supermercado. Para borrar, debo borrar el primer elemento, o sea el primero en ser insertado va a ser el primero en ser borrado, de vuelta como una cola de supermercado.

Iterador: Un iterador es un tipo de dato abstracto que sirve para iterar sobre una lista. Su ventaja principal es que reduce la complejidad de busqueda ya que, en vez de pasar por todos los elementos anteriores para llegar al que quiero, me guardo cada vez un puntero al nodo asi cuando quiero avanzar, solo tengo que pasar al nodo siguiente. Esa es su funcion, iterar de forma menos compleja para, por ejemplo, listar todos los elementos de una lista.

Iterador interno y externo: Para el iterador interno solo se requiere una funcion, ya que en esta, se va a hacer la iteracion sola pero aplicando en cada elemento una funcion recibida por parametro que la crea el usuario. En esa funcion el usuario puede elegir hasta donde va a llegar la iteracion y que hacer con cada elemento. Se le dice interna porque ocurre dentro de la implementacion del TDA, el usuario no puede ver como se hace.
    En cambio en el externo si, ya que el usuario va a crear su propia iteracion, pero usando las funciones del TDA iterador con su estructura que contiene un puntero a la lista y un puntero al nodo actual. Estas funciones pueden crear la estructura del iterador, avanzar el puntero que apunta a los nodos, listar el elemento actual y verificar que el elemento actual tenga siguiente. Se le dice externo porque la iteracion ocurre fuera de la implementacion del TDA, es visible para el usuario.

